@page "/document-types"
@using BlazorReRe.Shared.Model.DocumentTypes
@using BlazorReRe.Shared.Wrapper
@inject HttpClient Http
<h1>Document types</h1>
<p>Documentの種類です</p>
<div class="row">
    <div class="col-md-6">
        <a href='/document-types/add' class="btn btn-primary" role="button">
            <i class="fas fa-plus-circle"></i>
            Add Document Type
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="Filter" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (dataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in dataList)
            {
                <tr>
                    <td>@data.Id</td>
                    <td>@data.Name</td>
                    <td>@data.Description</td>
                    <td>
                        <a href='/document-types/edit/@data.Id' class="btn btn-outline-dark" role="button">
                            <i class="fas fa-edit"></i>
                            Edit
                        </a>
                        <a href='/document-types/delete/@data.Id' class="btn btn-outline-danger" role="button">
                            <i class="fas fa-trash"></i>
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    // https://www.c-sharpcorner.com/article/crud-operations-using-blazor-net-6-0-entity-framework-core/
    protected List<DocumentTypeRow>? dataList = new();
    protected List<DocumentTypeRow>? searchData = new();
    protected DocumentTypeRow? row = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }
    protected async Task GetData()
    {
        var result = await Http.GetFromJsonAsync<Result<List<DocumentTypeRow>>>("api/DocumentTypes");       // AccessTokenNotAvailableException
        dataList = result?.Data;
        searchData = dataList;
    }

    /// <summary>
    /// 絞り込み条件入力時
    /// データを絞り込んで表示する
    /// </summary>
    protected void Filter()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            dataList = searchData?
                .Where(x => x.Name?.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            dataList = searchData;
        }
    }
    protected void DeleteConfirm(int Id)
    {
        row = dataList?.FirstOrDefault(x => x.Id == Id);
    }

    /// <summary>
    /// 絞り込み条件クリアボタン
    /// </summary>
    public void ResetSearch()
    {
        SearchString = string.Empty;
        dataList = searchData;
    }
}
